#!/usr/bin/env ruby

STDOUT.sync = true

$LOAD_PATH.unshift File.join(File.dirname(__FILE__), *%w[.. lib])

require 'rubygems'
require 'main'
require 'dooby'

ORIGINAL_ARGV = ARGV.dup

Main {

   def run
     puts Dooby.current_list.list
   end
   
  mode 'init' do
    description 'Creates .dooby/list.yml file'
    def run
      Dooby.init
    end    
  end
  
  mode 'flush' do
    description 'Deletes all the tasks'
    def run
      if Dooby.cli_helper.flush?
        Dooby.current_list.flush!
        say "All the task were deleted!".red.bold
      else
        say "Keep doing things!".green.bold
      end
    end
  end
  
  mode 'trash' do
    description 'Deletes the .dooby directory'
    def run
      if Dooby.cli_helper.trash?
        Dooby.trash!
        puts "No more dooby here T_T".red.bold
      else
        puts "Keep doing things!".green.bold
      end
    end    
  end
  
  mode 'add' do
    description 'Creates a new task and adds it to the current todo list'
    argument 'task_text'
    def run
      Dooby.current_list.add do |t|
        t.todo = params[:task_text].value
        t.hold!
      end
      
      puts 'Task added!'
    end
  end
    
  mode 'ilist' do
    description "Interactive Listing"
    def run
      say "input #hashtag, @person, %project, :status or simple text"
      
      Dooby.cli_helper.keep_asking "> " do |what_to_show| 
        puts
        puts Dooby.current_list.list what_to_show.split(' ')
        puts
      end
    end
  end
  
  mode 'list' do
    description 'Lists @people, #tags, %projects or tasks (default)'

    argument('what_to_show'){
      arity -1 # zero or more arguments
    }
    
    def run
      puts Dooby.current_list.list params[:what_to_show].values
    end
  end  
  
  mode 'delete' do
    def run
      if Dooby.current_list.tasks.empty?
        puts 'No tasks to delete'.red
        exit
      end
      
      autocomp = Dooby.current_list.tasks.keys
      question = 'Tasky ID '.red.bold + '> '
      
      Dooby.cli_helper.keep_asking question, autocomp  do |task_id|
         
        if Dooby.current_list.delete! task_id
          say task_id + ' deleted...'
          exit
        else
          say "Don't try to fool #{'Dooby'.red}, she knows such task doesn't exists"
        end
        
      end
      
    end
  end
  
  mode 'edit' do
    def run
      
      autocomp = Dooby.current_list.tasks.keys
      question = 'Tasky ID '.blue.bold + '> '
      
      current_task_id = ''
      
      Dooby.cli_helper.keep_asking question, autocomp  do |task_id|
        current_task_id = task_id 
        if Dooby.current_list.tasks.key? task_id
          todo_to_edit = Dooby.current_list.tasks[task_id].todo
          Readline::HISTORY.push todo_to_edit
          autocomp = [todo_to_edit]
          break
        else
          puts "Task doesn't exist".red.bold
          exit
        end

      end
    
      question = 'TAB or up arrow to edit '.blue.bold + '> '

      Dooby.cli_helper.keep_asking question, autocomp  do |text|
        if text
          
          Dooby.current_list.edit! current_task_id do |t|
            t.todo = text
          end
          
          exit
        end                
      end
      
    end
  end

}